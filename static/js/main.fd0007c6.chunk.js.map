{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","offset","scroller","e","setState","button","target","props","images","step","frameSize","itemWidth","infinite","maxScroll","length","scrollWidth","textContent","nextProps","this","maxFrameSize","scrolledImagesCount","animationDuration","className","style","width","map","image","index","imageId","toString","height","transition","transform","src","alt","type","onClick","React","Component","App","changeHandle","name","value","checked","defaultValue","onChange","min","max","htmlFor","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd0007c6.chunk.js","sourcesContent":["import React, { MouseEventHandler } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[]\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  offset: number;\n};\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    offset: 0,\n  };\n\n  shouldComponentUpdate(nextProps: Props) {\n    const {\n      images,\n      itemWidth,\n    } = this.props;\n    const { offset } = this.state;\n    const maxFrameSize = images.length * itemWidth;\n\n    if (offset + nextProps.frameSize > maxFrameSize && offset !== 0) {\n      this.state.offset = maxFrameSize - nextProps.frameSize;\n    }\n\n    if (itemWidth !== nextProps.itemWidth && offset !== 0) {\n      const scrolledImagesCount = offset / itemWidth;\n\n      this.state.offset = nextProps.itemWidth * scrolledImagesCount;\n    }\n\n    return true;\n  }\n\n  scroller: MouseEventHandler = (e) => {\n    this.setState((state) => {\n      const button = e.target;\n      const {\n        images,\n        step,\n        frameSize,\n        itemWidth,\n        infinite,\n      } = this.props;\n\n      const maxScroll = (images.length * itemWidth) - frameSize;\n\n      let scrollWidth: number = ((button as HTMLButtonElement).textContent === 'Prev')\n        ? state.offset - step\n        : state.offset + step;\n\n      if (state.offset === maxScroll && infinite) {\n        scrollWidth = ((button as HTMLButtonElement).textContent === 'Next')\n          ? 0\n          : scrollWidth;\n      }\n\n      if (state.offset === 0 && this.props.infinite) {\n        scrollWidth = ((button as HTMLButtonElement).textContent === 'Prev')\n          ? maxScroll\n          : scrollWidth;\n      }\n\n      if (maxScroll < scrollWidth) {\n        scrollWidth = maxScroll;\n      }\n\n      if (scrollWidth < 0) {\n        scrollWidth = 0;\n      }\n\n      return { offset: scrollWidth };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.props;\n\n    const { offset } = this.state;\n\n    return (\n      <div className=\"carousel\">\n        <ul\n          className=\"carousel__list\"\n          style={{ width: `${frameSize}px` }}\n        >\n          {images.map((image, index) => {\n            const imageId = (index + 1).toString();\n\n            return (\n              <li\n                key={image}\n                className=\"carousel__item\"\n                style={{\n                  height: `${itemWidth}px`,\n                  transition: `transform ${animationDuration}ms`,\n                  transform: `translate(${-offset}px)`,\n                }}\n              >\n                <img\n                  src={image}\n                  alt={imageId}\n                  width={itemWidth}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <button\n          type=\"button\"\n          onClick={this.scroller}\n        >\n          Prev\n        </button>\n        <button\n          type=\"button\"\n          onClick={this.scroller}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { ChangeEventHandler } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component {\n  state: State = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  changeHandle: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const {\n      name,\n      value,\n      type,\n      checked,\n    } = e.target;\n\n    this.setState({\n      [name]: type === 'checkbox'\n        ? checked\n        : +value,\n    });\n  };\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1>\n          Carousel with\n          {' '}\n          {images.length}\n          {' '}\n          images\n        </h1>\n\n        <p>Item size</p>\n        <input\n          type=\"number\"\n          name=\"itemWidth\"\n          defaultValue={itemWidth}\n          onChange={this.changeHandle}\n        />\n\n        <p>Frame size</p>\n        <input\n          type=\"number\"\n          name=\"frameSize\"\n          defaultValue={frameSize}\n          min={0}\n          max={images.length}\n          onChange={this.changeHandle}\n        />\n\n        <p>Step</p>\n        <input\n          type=\"number\"\n          name=\"step\"\n          defaultValue={step}\n          min={1}\n          max={images.length - 1}\n          onChange={this.changeHandle}\n        />\n\n        <p>Animation time</p>\n        <input\n          type=\"number\"\n          name=\"animationDuration\"\n          defaultValue={animationDuration}\n          min={0}\n          onChange={this.changeHandle}\n        />\n\n        <div>\n          <label htmlFor=\"infinite\">\n            Infinite\n            <input\n              type=\"checkbox\"\n              id=\"infinite\"\n              name=\"infinite\"\n              checked={infinite}\n              onChange={this.changeHandle}\n            />\n          </label>\n        </div>\n\n        <Carousel\n          images={images}\n          step={step * itemWidth}\n          frameSize={frameSize * itemWidth}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}