{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","scrollWidth","this","props","images","step","frameSize","itemWidth","animationDuration","infinite","frameWidth","scroller","e","setState","prevState","button","target","maxScroll","length","textContent","className","style","width","map","image","index","imageId","toString","height","transitionDuration","transform","src","alt","type","onClick","React","PureComponent","App","Component","ReactDOM","render","document","getElementById"],"mappings":"uPAgBaA,EAAb,4MACEC,MAAQ,CACNC,YAAa,GAFjB,4CAKE,WAAU,IAAD,OACP,EAOIC,KAAKC,MANPC,EADF,EACEA,OACAC,EAFF,EAEEA,KACAC,EAHF,EAGEA,UACAC,EAJF,EAIEA,UACAC,EALF,EAKEA,kBACAC,EANF,EAMEA,SAGIR,EAAgBC,KAAKF,MAArBC,YAEAS,EAAaH,EAAYD,EAEzBK,EAA8B,SAACC,GACnC,EAAKC,UAAS,SAACC,GACb,IAAMC,EAASH,EAAEI,OACXC,EAAab,EAAOc,OAASX,EAAaG,EA0BhD,OAxBAT,EAA6D,SAA7Cc,EAA6BI,YACzClB,EAAcM,EAAYF,EAC1BJ,EAAcM,EAAYF,EAE1BS,EAAUb,cAAgBgB,GAAaR,IACzCR,EAA6D,SAA7Cc,EAA6BI,YACzC,EACAlB,GAGwB,IAA1Ba,EAAUb,aAAqBQ,IACjCR,EAA6D,SAA7Cc,EAA6BI,YACzCF,EACAhB,GAGFgB,EAAYhB,IACdA,EAAcgB,GAGZhB,EAAc,IAChBA,EAAc,GAGT,CAAEA,mBAIb,OACE,sBAAKmB,UAAU,WAAf,UACE,oBACEA,UAAU,iBACVC,MAAO,CAAEC,MAAM,GAAD,OAAKZ,EAAL,OAFhB,SAIGN,EAAOmB,KAAI,SAACC,EAAOC,GAClB,IAAMC,GAAWD,EAAQ,GAAGE,WAE5B,OACE,oBAEEP,UAAU,iBACVC,MAAO,CACLO,OAAO,GAAD,OAAKrB,EAAL,MACNsB,mBAAmB,GAAD,OAAKrB,EAAL,MAClBsB,UAAU,aAAD,QAAgB7B,EAAhB,QANb,SASE,qBACE8B,IAAKP,EACLQ,IAAKN,EACLJ,MAAOf,KAXJmB,QAkBb,wBACEO,KAAK,SACLC,QAASvB,EAFX,kBAMA,wBACEsB,KAAK,SACLC,QAASvB,EAFX,yBAvFR,GAA8BwB,IAAMC,eCR9BC,E,4MACJrC,MAAQ,CACNI,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iB,4CAIJ,WACE,IAAQA,EAAWF,KAAKF,MAAhBI,OAER,OACE,sBAAKgB,UAAU,MAAf,UAEE,gDAAmBhB,EAAOc,OAA1B,aAEA,cAAC,EAAD,CACEd,OAAQA,EACRC,KAAM,EACNC,UAAW,EACXC,UAAW,IACXC,kBAAmB,IACnBC,UAAU,W,GA9BF0B,IAAMG,WAqCTD,IC1CfE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f99832dd.chunk.js","sourcesContent":["import React, { MouseEventHandler } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[]\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  scrollWidth: number;\n};\n\nexport class Carousel extends React.PureComponent<Props, State> {\n  state = {\n    scrollWidth: 0,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    let { scrollWidth } = this.state;\n\n    const frameWidth = itemWidth * frameSize;\n\n    const scroller: MouseEventHandler = (e) => {\n      this.setState((prevState) => {\n        const button = e.target;\n        const maxScroll = (images.length * itemWidth) - frameWidth;\n\n        scrollWidth = ((button as HTMLButtonElement).textContent === 'Prev')\n          ? scrollWidth - itemWidth * step\n          : scrollWidth + itemWidth * step;\n\n        if (prevState.scrollWidth === maxScroll && infinite) {\n          scrollWidth = ((button as HTMLButtonElement).textContent === 'Next')\n            ? 0\n            : scrollWidth;\n        }\n\n        if (prevState.scrollWidth === 0 && infinite) {\n          scrollWidth = ((button as HTMLButtonElement).textContent === 'Prev')\n            ? maxScroll\n            : scrollWidth;\n        }\n\n        if (maxScroll < scrollWidth) {\n          scrollWidth = maxScroll;\n        }\n\n        if (scrollWidth < 0) {\n          scrollWidth = 0;\n        }\n\n        return { scrollWidth };\n      });\n    };\n\n    return (\n      <div className=\"carousel\">\n        <ul\n          className=\"carousel__list\"\n          style={{ width: `${frameWidth}px` }}\n        >\n          {images.map((image, index) => {\n            const imageId = (index + 1).toString();\n\n            return (\n              <li\n                key={imageId}\n                className=\"carousel__item\"\n                style={{\n                  height: `${itemWidth}px`,\n                  transitionDuration: `${animationDuration}ms`,\n                  transform: `translate(${-scrollWidth}px)`,\n                }}\n              >\n                <img\n                  src={image}\n                  alt={imageId}\n                  width={itemWidth}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <button\n          type=\"button\"\n          onClick={scroller}\n        >\n          Prev\n        </button>\n        <button\n          type=\"button\"\n          onClick={scroller}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"app\">\n        {/* eslint-disable-next-line */}\n        <h1>Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={3}\n          frameSize={3}\n          itemWidth={130}\n          animationDuration={1000}\n          infinite={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}